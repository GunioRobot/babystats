require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe BabiesController do

  def mock_baby(stubs={})
    @mock_baby ||= mock_model(Baby, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all babies as @babies" do
      Baby.stub(:all) { [mock_baby] }
      get :index
      assigns(:babies).should eq([mock_baby])
    end
  end

  describe "GET show" do
    it "assigns the requested baby as @baby" do
      Baby.stub(:find).with("37") { mock_baby }
      get :show, :id => "37"
      assigns(:baby).should be(mock_baby)
    end
  end

  describe "GET new" do
    it "assigns a new baby as @baby" do
      Baby.stub(:new) { mock_baby }
      get :new
      assigns(:baby).should be(mock_baby)
    end
  end

  describe "GET edit" do
    it "assigns the requested baby as @baby" do
      Baby.stub(:find).with("37") { mock_baby }
      get :edit, :id => "37"
      assigns(:baby).should be(mock_baby)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created baby as @baby" do
        Baby.stub(:new).with({'these' => 'params'}) { mock_baby(:save => true) }
        post :create, :baby => {'these' => 'params'}
        assigns(:baby).should be(mock_baby)
      end

      it "redirects to the created baby" do
        Baby.stub(:new) { mock_baby(:save => true) }
        post :create, :baby => {}
        response.should redirect_to(baby_url(mock_baby))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved baby as @baby" do
        Baby.stub(:new).with({'these' => 'params'}) { mock_baby(:save => false) }
        post :create, :baby => {'these' => 'params'}
        assigns(:baby).should be(mock_baby)
      end

      it "re-renders the 'new' template" do
        Baby.stub(:new) { mock_baby(:save => false) }
        post :create, :baby => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested baby" do
        Baby.stub(:find).with("37") { mock_baby }
        mock_baby.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :baby => {'these' => 'params'}
      end

      it "assigns the requested baby as @baby" do
        Baby.stub(:find) { mock_baby(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:baby).should be(mock_baby)
      end

      it "redirects to the baby" do
        Baby.stub(:find) { mock_baby(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(baby_url(mock_baby))
      end
    end

    describe "with invalid params" do
      it "assigns the baby as @baby" do
        Baby.stub(:find) { mock_baby(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:baby).should be(mock_baby)
      end

      it "re-renders the 'edit' template" do
        Baby.stub(:find) { mock_baby(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested baby" do
      Baby.stub(:find).with("37") { mock_baby }
      mock_baby.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the babies list" do
      Baby.stub(:find) { mock_baby }
      delete :destroy, :id => "1"
      response.should redirect_to(babies_url)
    end
  end

end
